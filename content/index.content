<h1>Nicholas Ham</h1>
<p>
	Personal site of Nicholas Ham. I hold a doctorate in mathematics from the University of Tasmania, during which I had <a href="https://scholar.google.com/citations?user=IGXAO_cAAAAJ&hl=en&oi=ao">Desmond FitzGerald</a> and <a href="https://www.utas.edu.au/profiles/staff/maths-physics/peter-jarvis">Peter Jarvis</a> (<a href="https://scholar.google.com/scholar?hl=en&as_sdt=0%2C5&q=PD+jarvis&btnG=">Google Scholar</a>) as advisors. 
</p>

<p>
	Among other open source projects, I develop a non-opinionated high-performance web development framework <a href="https://nift.dev">Nift</a>.
</p>

<div align="center">
	<a href="https://nift.dev">
		<picture>
			<source 
				media="(max-width: 750px)"
				srcset="@pathtofile(output/assets/images/w=500px/nift-logo.webp)"
			>
			<source
				srcset="@pathtofile(output/assets/images/nift-logo.webp)"
			>
			<img 
				src="@pathtofile(output/assets/images/nift-logo.webp)" 
				alt="nift logo" 
				height = 125
				width  = 375
			>
		</picture>
	</a>
</div>

<p>
	On top of completing a mathematics major during undergrad, I completed majors in analytical economics and applied computing. I also contributed to designing and building an international programming competition sponsored by Google, and have experience teaching both mathematics and economics classes at the undergraduate level.
</p>

<p>
	I enjoy playing around with <a href="https://en.wikipedia.org/wiki/Generative_art">generative art</a> (<a href="@pathto(generative_art)">examples</a>) using an existing image or video as a canvas along with <a href="https://opencv.org/">opencv</a> to access the <mono>RGB</mono> values at each pixel, coding c/c++ to generate frames using various of my own algorithmic techniques along with custom <mono>RGB@ent(<->)HSV</mono> conversion algorithms (none of <a href="https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-range-0-255-for-both">these</a> work correctly), then combine the generated frames using <a href="https://ffmpeg.org/">ffmpeg</a>, so basically like <a href="@pathtofile(output/assets/images/draw_owl.webp)">this</a> with a sprinkle of <a href="@pathtofile(output/assets/images/magic.webp)">this</a>. The algorithm is actually pretty simple, it just discretises a parameterised ellipse with the number of points equal to the desired number of frames, then for each frame and pixel translates the hue value by the distance from the point on the ellipse to the pixel modulo the number of hue values (360). 
</p>